// lib/models/chat_model.dart
import 'package:flutter/foundation.dart';
import 'message_model.dart';
import 'user_model.dart';
import 'product_model.dart';

class Chat {
  final int id;
  final User buyer;
  final User seller;
  final Product product;
  final DateTime lastMessageAt;
  final List<Message>? messages;
  final Message? lastMessage;

  Chat({
    required this.id,
    required this.buyer,
    required this.seller,
    required this.product,
    required this.lastMessageAt,
    this.messages,
    this.lastMessage,
  });

  factory Chat.fromJson(Map<String, dynamic> json) {
    return Chat(
      id: json['id'],
      buyer: User.fromJson(json['buyer']),
      seller: User.fromJson(json['seller']),
      product: Product.fromJson(json['Product']),
      lastMessageAt: DateTime.parse(json['lastMessageAt']),
      messages: json['Messages'] != null
          ? List<Message>.from(
              json['Messages'].map((m) => Message.fromJson(m)))
          : null,
      lastMessage: json['Messages'] != null && json['Messages'].isNotEmpty
          ? Message.fromJson(json['Messages'][0])
          : null,
    );
  }
}

// lib/models/message_model.dart
class Message {
  final int id;
  final int chatId;
  final int senderId;
  final String content;
  final bool isRead;
  final DateTime createdAt;
  final User? sender;

  Message({
    required this.id,
    required this.chatId,
    required this.senderId,
    required this.content,
    required this.isRead,
    required this.createdAt,
    this.sender,
  });

  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      id: json['id'],
      chatId: json['chatId'],
      senderId: json['senderId'],
      content: json['content'],
      isRead: json['isRead'] ?? false,
      createdAt: DateTime.parse(json['createdAt']),
      sender: json['sender'] != null ? User.fromJson(json['sender']) : null,
    );
  }
}

// lib/providers/chat_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import '../models/chat_model.dart';
import '../models/message_model.dart';
import '../services/api_service.dart';
import '../services/socket_service.dart';

// Chat list state
class ChatListState {
  final List<Chat> chats;
  final bool isLoading;
  final String? error;

  ChatListState({
    required this.chats,
    this.isLoading = false,
    this.error,
  });

  ChatListState copyWith({
    List<Chat>? chats,
    bool? isLoading,
    String? error,
  }) {
    return ChatListState(
      chats: chats ?? this.chats,
      isLoading: isLoading ?? this.isLoading,
      error: error,
    );
  }
}

// Chat list notifier
class ChatListNotifier extends StateNotifier<ChatListState> {
  final ApiService _apiService;
  final SocketService _socketService;

  ChatListNotifier(this._apiService, this._socketService)
      : super(ChatListState(chats: [])) {
    _initialize();
  }

  void _initialize() {
    fetchChats();
    _listenForChatUpdates();
  }

  void _listenForChatUpdates() {
    _socketService.socket.on('new chat notification', (data) {
      // Refresh chats when a new message notification is received
      fetchChats();
    });
  }

  Future<void> fetchChats() async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      final chats = await _apiService.getChats();
      state = state.copyWith(chats: chats, isLoading: false);
    } catch (e) {
      state = state.copyWith(
          isLoading: false, error: 'Failed to load chats: ${e.toString()}');
    }
  }

  Future<Chat?> createChat(int sellerId, int productId) async {
    try {
      state = state.copyWith(isLoading: true);
      final chat = await _apiService.createChat(sellerId, productId);
      
      // Add the new chat to the list if it doesn't exist
      if (!state.chats.any((c) => c.id == chat.id)) {
        state = state.copyWith(
          chats: [chat, ...state.chats],
          isLoading: false,
        );
      } else {
        state = state.copyWith(isLoading: false);
      }
      
      return chat;
    } catch (e) {
      state = state.copyWith(
          isLoading: false, error: 'Failed to create chat: ${e.toString()}');
      return null;
    }
  }

  void updateChatWithNewMessage(int chatId, Message message) {
    final updatedChats = [...state.chats];
    final chatIndex = updatedChats.indexWhere((chat) => chat.id == chatId);
    
    if (chatIndex != -1) {
      // Move this chat to the top of the list
      final chat = updatedChats.removeAt(chatIndex);
      updatedChats.insert(0, chat);
      state = state.copyWith(chats: updatedChats);
    }
  }
}

final chatListProvider =
    StateNotifierProvider<ChatListNotifier, ChatListState>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  final socketService = ref.watch(socketServiceProvider);
  return ChatListNotifier(apiService, socketService);
});

// Single chat state (for active conversation)
class ChatState {
  final Chat? chat;
  final List<Message> messages;
  final bool isLoading;
  final String? error;
  final bool isTyping;
  final int? typingUserId;

  ChatState({
    this.chat,
    required this.messages,
    this.isLoading = false,
    this.error,
    this.isTyping = false,
    this.typingUserId,
  });

  ChatState copyWith({
    Chat? chat,
    List<Message>? messages,
    bool? isLoading,
    String? error,
    bool? isTyping,
    int? typingUserId,
  }) {
    return ChatState(
      chat: chat ?? this.chat,
      messages: messages ?? this.messages,
      isLoading: isLoading ?? this.isLoading,
      error: error,
      isTyping: isTyping ?? this.isTyping,
      typingUserId: typingUserId ?? this.typingUserId,
    );
  }
}

// Active chat notifier
class ChatNotifier extends StateNotifier<ChatState> {
  final ApiService _apiService;
  final SocketService _socketService;
  
  // To keep track of typing state
  bool _userIsTyping = false;
  int? _activeChatId;

  ChatNotifier(this._apiService, this._socketService)
      : super(ChatState(messages: [])) {
    _listenForMessages();
    _listenForTyping();
  }

  void _listenForMessages() {
    _socketService.socket.on('new message', (data) {
      final message = Message.fromJson(data);
      if (_activeChatId == message.chatId) {
        // Add new message to the current chat
        state = state.copyWith(
          messages: [...state.messages, message],
        );
        
        // Mark message as read if it's from another user
        if (message.senderId != _socketService.userId) {
          markMessagesAsRead(_activeChatId!);
        }
      }
    });
  }

  void _listenForTyping() {
    _socketService.socket.on('typing', (data) {
      if (_activeChatId == data['chatId'] && 
          data['userId'] != _socketService.userId) {
        state = state.copyWith(
          isTyping: true,
          typingUserId: data['userId'],
        );
      }
    });
    
    _socketService.socket.on('stop typing', (data) {
      if (_activeChatId == data['chatId'] && 
          data['userId'] != _socketService.userId) {
        state = state.copyWith(
          isTyping: false,
          typingUserId: null,
        );
      }
    });
  }

  Future<void> loadChat(int chatId) async {
    try {
      _activeChatId = chatId;
      state = state.copyWith(isLoading: true, error: null);
      
      // Join the chat room
      _socketService.socket.emit('join chat', chatId);
      
      final chat = await _apiService.getChat(chatId);
      final messages = chat.messages ?? [];
      
      state = state.copyWith(
        chat: chat,
        messages: messages,
        isLoading: false,
      );
      
      // Mark messages as read
      markMessagesAsRead(chatId);
      
    } catch (e) {
      state = state.copyWith(
          isLoading: false, error: 'Failed to load chat: ${e.toString()}');
    }
  }

  Future<void> sendMessage(String content) async {
    try {
      if (state.chat == null || content.trim().isEmpty) return;
      
      // Send message via socket
      _socketService.socket.emit('send message', {
        'chatId': state.chat!.id,
        'content': content,
      });
      
      // Stop typing indicator
      stopTyping();
      
    } catch (e) {
      state = state.copyWith(error: 'Failed to send message: ${e.toString()}');
    }
  }

  void markMessagesAsRead(int chatId) {
    _socketService.socket.emit('mark as read', chatId);
  }

  void sendTypingIndicator() {
    if (state.chat == null || _userIsTyping) return;
    
    _userIsTyping = true;
    _socketService.socket.emit('typing', state.chat!.id);
  }

  void stopTyping() {
    if (state.chat == null || !_userIsTyping) return;
    
    _userIsTyping = false;
    _socketService.socket.emit('stop typing', state.chat!.id);
  }

  void clearActiveChat() {
    _activeChatId = null;
    state = ChatState(messages: []);
  }
}

final chatProvider = StateNotifierProvider<ChatNotifier, ChatState>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  final socketService = ref.watch(socketServiceProvider);
  return ChatNotifier(apiService, socketService);
});

// lib/services/socket_service.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import '../utils/secure_storage.dart';

class SocketService {
  late IO.Socket socket;
  int? userId;
  
  Future<void> initialize() async {
    final token = await SecureStorage.getToken();
    userId = await SecureStorage.getUserId();
    
    socket = IO.io('http://your-backend-url:5000', {
      'transports': ['websocket'],
      'autoConnect': true,
      'auth': {'token': token}
    });
    
    socket.onConnect((_) {
      print('Socket connected');
    });
    
    socket.onDisconnect((_) {
      print('Socket disconnected');
    });
    
    socket.onError((error) {
      print('Socket error: $error');
    });
    
    socket.onConnectError((error) {
      print('Connection error: $error');
    });
  }
  
  void disconnect() {
    socket.disconnect();
  }
}

final socketServiceProvider = Provider<SocketService>((ref) {
  final service = SocketService();
  service.initialize();
  ref.onDispose(() {
    service.disconnect();
  });
  return service;
});

// lib/services/api_service.dart
import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import '../models/chat_model.dart';
import '../utils/secure_storage.dart';

class ApiService {
  final String baseUrl = 'http://your-backend-url:5000/api';
  
  Future<Map<String, String>> getHeaders() async {
    final token = await SecureStorage.getToken();
    return {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $token',
    };
  }
  
  Future<List<Chat>> getChats() async {
    final headers = await getHeaders();
    final response = await http.get(
      Uri.parse('$baseUrl/chats'),
      headers: headers,
    );
    
    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => Chat.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load chats: ${response.statusCode}');
    }
  }
  
  Future<Chat> getChat(int chatId) async {
    final headers = await getHeaders();
    final response = await http.get(
      Uri.parse('$baseUrl/chats/$chatId'),
      headers: headers,
    );
    
    if (response.statusCode == 200) {
      return Chat.fromJson(json.decode(response.body));
    } else {
      throw Exception('Failed to load chat: ${response.statusCode}');
    }
  }
  
  Future<Chat> createChat(int sellerId, int productId) async {
    final headers = await getHeaders();
    final response = await http.post(
      Uri.parse('$baseUrl/chats'),
      headers: headers,
      body: json.encode({
        'sellerId': sellerId,
        'productId': productId,
      }),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      return Chat.fromJson(json.decode(response.body));
    } else {
      throw Exception('Failed to create chat: ${response.statusCode}